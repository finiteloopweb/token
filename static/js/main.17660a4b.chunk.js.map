{"version":3,"sources":["components/Form/TextDisplay/TextDisplay.js","components/Form/Form.js","components/Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["TextDisplay","react_default","a","createElement","className","id","this","props","children","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","submitHandler","state","key","error","e","preventDefault","length","showModal","handleError","setTimeout","changeHandler","hideModal","setState","target","value","isError","onSubmit","classNames","error ","src","icon","alt","type","maxLength","placeholder","width","onChange","buttonType","color","onClick","handleClick","Modal","visible","visibility","modalIsVisible","show","handleClose","message","App","displayText","handleData","data","pass","generatePassword","toUpperCase","i","j","getRandomChar","caps","split","lows","nums","charset","Math","floor","random","Modal_Modal_Modal","Form_Form_Form","TextDisplay_TextDisplay_TextDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17660a4b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TextDisplay.css';\nimport '../../../App.css';\n\nexport default class TextDisplay extends Component {\n    render() {\n        return(\n            <div className=\"display\">\n                <p className=\"text-dark\" id=\"generated\">{this.props.children}</p>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './Form.css';\nimport '../../App.css';\nimport classNames from 'classnames';\n\nexport default class Form extends Component {\n    constructor() {\n        super();\n\n        this.handleChange = this.handleChange.bind(this);\n        this.submitHandler = this.submitHandler.bind(this);\n        this.state = {\n            key: '',\n            error: false\n        };\n    }\n\n    submitHandler(e) {\n        e.preventDefault();\n\n        if (this.state.key.length < 4 || this.state.key.length === 0) {\n            this.props.showModal();\n            this.handleError(true);\n            setTimeout(function() {\n                this.handleError(false);\n            }.bind(this), 2500);\n        } else if(this.state.key.length === 4){\n            this.props.changeHandler(this.state.key);\n            this.props.hideModal();\n            this.setState({\n                key: ''\n            });\n        }\n\n    }\n\n    handleChange(e) {\n        this.setState({\n            key: e.target.value\n        });\n    }\n\n    handleError(isError) {\n        this.setState({\n            error: isError\n        })\n        if(!isError) {\n            this.props.hideModal();\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h4 className=\"text-light text-uppercase\">Enter a 4-Letter Key</h4>\n                <form className=\"flex-form-center\" onSubmit={this.submitHandler}>\n                    <div className={classNames({\"error \":this.state.error},\"container\")}>\n                        <img className=\"icon-small\" src={this.props.icon} alt=\"\" />\n                        <input type=\"text\" id=\"key\" maxLength={this.props.length} placeholder={this.props.placeholder} className={\"input text-uppercase \" + this.props.width} value={this.state.key} onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"wide\">\n                        <button className={\"button \" + this.props.buttonType + \" \" + this.props.color} onClick={this.props.handleClick}>Generate</button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './Modal.css';\nimport '../../App.css';\n\nexport default class Modal extends Component {\n    modalIsVisible(visible) {\n\n        if (visible) {\n            this.visibility = \"modal visible flex-center\"\n        } else {\n            this.visibility = \"modal hidden\"\n        }\n\n        return this.visibility\n    }\n\n    render() {\n        return (\n            <div className={this.modalIsVisible(this.props.show)}>\n                <div className=\"close-button\" onClick={this.props.handleClose}><img src='images/icons/cross.svg' alt=\"\"/></div>\n                <p className=\"text-light text-center\">{this.props.message}</p>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport TextDisplay from './components/Form/TextDisplay/TextDisplay';\nimport Form from './components/Form/Form';\nimport Modal from './components/Modal/Modal';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { displayText: \"Enter a key and press generate for a password.\" };\n    this.handleData = this.handleData.bind(this);\n  }\n\n  handleData(data) {\n    var pass = this.generatePassword();\n\n    this.setState({\n      displayText: \"\" + data.toUpperCase() + pass\n    });\n  }\n\n  generatePassword() {\n    var pass = \"\";\n    var randChar;\n\n    for (var i = 0; i < 3; i++) {\n      pass += '-';\n      for (var j = 0; j < 4; j++) {\n        randChar = this.getRandomChar();\n        pass += randChar;\n      }\n    }\n\n    return pass;\n  }\n\n  getRandomChar() {\n    var caps = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n    var lows = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    var nums = '01234567890'.split('');\n\n    var charset = Math.floor(Math.random() * 3 + 1);\n    var choice = \"A\";\n\n    if (charset === 1) {\n      choice = caps[Math.floor(Math.random() * caps.length)];\n    } else if (charset === 2) {\n      choice = lows[Math.floor(Math.random() * lows.length)];\n    } else {\n      choice = nums[Math.floor(Math.random() * nums.length)];\n    }\n    return choice;\n  }\n\n  showModal = () => {\n    this.setState({show: true});\n  }\n\n  hideModal = () => {\n    this.setState({show: false});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Modal message=\"Please enter a four-digit code to generate your password.\" show={this.state.show} handleClose={this.hideModal}/>\n        <div className=\"hero flex-center\">\n          <div className=\"flex-center\">\n            <h1 className=\"text-light text-uppercase flex-center\">Token</h1>\n            <h4 className=\"text-light text-uppercase flex-center\">A Simple, Secure Password Generator.</h4>\n            <hr />\n          </div>\n\n          <div className=\"flex-center\">\n            <Form icon=\"images/icons/flag.svg\" length=\"4\" width=\"small\" placeholder=\"Key\" changeHandler={this.handleData} value={this.state.key} showModal={this.showModal} hideModal={this.hideModal} buttonType=\"primary\" color=\"darkviolet\" />\n          </div>\n        </div>\n        <div className=\"bottom flex-center\">\n          <h4 className=\"text-dark text-center text-uppercase\" id=\"password-header\">Your Password</h4>\n          <TextDisplay>{this.state.displayText}</TextDisplay>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}